// ENTIDADES BÁSICAS

Table centro as CEN {
  id int [pk, increment]
  nombre varchar [not null, unique]
}

Table curso as CURSO {
  id int [pk, increment]
  curso varchar(4) [not null]
}

Table mail_predef as MAIL {
  id int [pk, increment]
  titulo varchar [not null, unique]
  asunto varchar [not null]
  cuerpo text [not null]
}
 
Table titulacion as TIT {
  id int [pk]
  nombre varchar [not null, unique]
  id_centro int [not null]
}

Ref: TIT.id_centro > CEN.id

Table asignatura as ASIG {
  id int [pk]
  id_tit int [not null]
  nombre varchar [not null]
  ects int [not null]
  cuatrimestre cuatrimestre [not null]
  tipo tipo_asignatura [not null]
}

Ref: ASIG.id_tit > TIT.id

Table asignatura_ext as EXT_ASIG {
  id int [pk]
  id_conv int [not null] // Creo que es recomendable para que no se mezclen luego asignaturas con nombre parecido entre distintos convenios
  cod_asig varchar [note: "Identificador en destino que facilite la identificación de la asignatura"]
  nombre varchar [not null]
  ects int [not null]
  id_curso int [ref: > CURSO.id, not null, note: "Importante, ya que pueden cambiar de un año para otro en destino"] 
  cuatrimestre cuatrimestre [not null]
}

Ref: EXT_ASIG.id_conv > CON.id

Table pais as P {
  iso varchar [pk]
  nombre varchar [not null]
}

Table universidad as UNI {
  cod_uni varchar [not null]
  cod_pais varchar [not null]
  nombre varchar [not null]
  direccion varchar 
  web varchar
  email varchar
  
  Indexes {
    (cod_pais, cod_uni) [pk]
  }
}

Ref: UNI.cod_pais > P.iso

Table area as AR {
  cod_isced varchar [pk] // Al cambiar el nombre, cambiar también la relación de FK en convenios 
  nombre_isced varchar [not null]
  nombre_area varchar 
  
}

// USUARIOS Y TIPOS

Table user as U {
  id int [pk, increment] // auto-increment
  username varchar
  nombre varchar
  tipo tipo_usuario
  password varchar
  email varchar
  telefono varchar
  sexo sexo
}
 
Table estudiante as EST{
  id_usuario int [not null]
  dni varchar [not null, unique] // PUEDE SER NIE, CUIDADO CON EL FORMATO
  id_convenio int [not null]
  id_titulacion int [not null]
  telefono2 int 
  email_go_ugr varchar 
  f_nacimiento datetime [not null]
  tipo_estudiante tipo_estudiante [not null]
  cesion_datos boolean 
  nota_expediente double 
  beca_mec boolean // Posiblemente sea un booleano BECA MEC sí/no
}

Ref: EST.id_titulacion > TIT.id
Ref: U.id - EST.id_usuario
Ref: EST.id_convenio > CON.id

//No tiene ahora mismo mucho sentido
//Table partner as PART {
//  id int [pk, increment]
//  titulo varchar
//  email varchar
//}

// CONVENIOS Y ACUERDOS

Table competencia_ling as CL {
  id int [pk, increment]
  lengua varchar [not null]
  nivel nivel_idioma [not null]
}

Table rel_cl_est {
  id int [pk, increment]
  id_cl int [ref: > CL.id, not null]
  id_est int [ref: > EST.id_usuario, not null]
}

Table req_ling_conv {
  id int [pk, increment] // Teóricamente necesario
  id_comp int [ref: > CL.id, not null]
  id_conv int [ref: > CON.id, not null]
}

Table convenio as CON {
  id int [pk, increment]
  cod_area varchar [not null]
  cod_uni varchar [not null]
  cod_pais varchar [not null]
  id_admon_out int
  id_tutor int [not null, note: 'ref a usuario pero tiene que ser un tutor, futura restricción']
  
  id_curso_creacion int [ref: > CURSO.id, not null]
  creado_por int [not null]
  
  num_becas_in int [not null]
  num_becas_out int [not null]
  
  meses_in int [not null]
  meses_out int [not null]
  
  anotaciones text
  
  anno_inicio int [not null]
  anno_fin int [not null]
  
  req_titulacion varchar
  req_curso varchar
  
  nominacion_online boolean 
  link_nom_online varchar 
  info_nom_online text
  
  link_documentacion varchar
  
  movilidad_pdi boolean 
  movilidad_pas boolean 
  
  tipo_movilidad tipo_movilidad [not null]
  
  user_online varchar
  password_online varchar
  notas_online varchar
  fecha_online datetime
  
  info_tor text 
  
  observ_discapacidad text
  observ_req_ling text // Sustitución del campo en requisito_ling para reutilizar entradas de la tabla y hacer una n:n
  
  begin_nom_1s datetime
  end_nom_1s datetime
  begin_nom_2s datetime
  end_nom_2s datetime
  begin_app_1s datetime
  end_app_1s datetime
  begin_app_2s datetime
  end_app_2s datetime
  begin_mov_1s datetime
  end_mov_1s datetime
  begin_mov_2s datetime
  end_mov_2s datetime
  
  memo_grading text
  memo_visado text
  memo_seguro text
  memo_alojamiento text

}

Ref: P.iso < CON.cod_pais
Ref: CON.creado_por > U.id
Ref: CON.cod_area > AR.cod_isced
Ref: CON.(cod_pais, cod_uni) > UNI.(cod_pais, cod_uni)
Ref: CON.id_admon_out > AD_OUT.id
Ref: CON.(cod_pais, cod_uni) > AD_OUT.(cod_pais, cod_uni)
Ref: CON.id_tutor > U.id


// Encontrar la forma de crear un usuario por admon, de modo que se tenga a la mano en el convenio para proporcionarlo a los contactos correspondientes y así podrían nominar

Table admon_out as AD_OUT {
  id int [pk, increment]
  cod_pais varchar [not null]
  cod_uni varchar [not null]
  
  nombre_coord varchar
  cargo_coord varchar
  email_coord varchar
  tlf_coord varchar
  address_coord varchar [note:"Por defecto igual que la de la universidad"]
  web_inf_acad varchar
  
  nombre_admon_in varchar
  cargo_admon_in varchar
  mail_admon_in varchar
  nombre_resp_acad_in varchar
  cargo_resp_acad_in varchar
  
  nombre_admon_out varchar
  cargo_admon_out varchar
  mail_admon_out varchar
  nombre_resp_acad_out varchar
  cargo_resp_acad_out varchar
  mail_resp_acad_out varchar
}

Table acuerdo_estudios as AE {
  id int [pk, increment]
  id_estudiante int [not null]
  timestamp_creacion datetime [not null]
  periodo cuatrimestre [not null]
  fase int [not null]
  id_curso int [ref: > CURSO.id, not null]
  necesidades text
  begin_movilidad datetime // comienzo individual del estudiante
  end_movilidad datetime // fin individual del estudiante
  timestamp_nominacion datetime 
  timestamp_registro datetime [not null]
  link_documentacion varchar [note: 'otra alternativa: tabla contenedora de link_documentacion para AE (necesaria otra para convenios también, apliando el mismo método)']
  n_solicitud_RRII int
  convocatoria convocatoria [not null]
  
  // Campos para validar el acuerdo (deliberacion con tutores hasta su final acuerdo)
  // ¿Podría la validación hacerse con el historial?
  // O más facil: hacer el historial guardando asignaturasen la tabla asignatura-ae sin necesidad de tener otra tabla para historial del acuerdo
  // Tiene más sentido almacenar solo los cambios inmediatamente anteriores
  
  // El estado "VIGENTE" podría venir cuando existiera un expediente para el usuario y el acuerdo que sea NOMINADO, etc.
  estado_validacion estado_ae [note: 'idea: podría tener una serie de códigos que pudieran definir el estado o, de ser otro número de los predefinidos, sería el id de renuncia, dándose el acuerdo como inválido (por renuncia)']
}

Ref: AE.id_estudiante > EST.id_usuario

Table ae_asigloc_asigext {
  id_ae int
  asig_loc int [ref: > ASIG.id]
  asig_ext int [ref: > EXT_ASIG.id]
  
  Indexes {
    (id_ae, asig_loc, asig_ext) [pk] //No se pueden repetir
  }
}

Table renuncia as REN{
  id int [pk, increment]
  id_ae int  [not null, ref: - AE.id, note: 'construir un disparador para invalidar el acuerdo en su tabla']
  descripcion text [not null]
  timestamp datetime [not null]
}

// EXPEDIENTES, TIPOS DE EXPDIENTE Y FASES

Table expediente as EXP{
  id int [pk, increment]
  id_ae int [not null]
  id_tipo_exp int [not null]
}

Ref: EXP.id_ae > AE.id
Ref: EXP.id_tipo_exp > TIPO_EXP.id

// Podría estudiarse la creación de otra tabla para poner descripciones cortas a los expedientes si no se tiene suficiente con construirla a partir de las primeras letras de la descripción de los mismos

Table tipo_expediente as TIPO_EXP {
  id int [pk, increment]
  descripcion varchar [not null]
  tipo_estudiante tipo_estudiante [not null]
}

Table fase_expediente as FAS_EXP {
  id int [pk, increment]
  id_tipo_exp int [not null]
  descripcion varchar [not null]
  fase_final boolean [default: 0]
}

Ref: FAS_EXP.id_tipo_exp > TIPO_EXP.id

Table envio_mail_fase { //En qué fase hay que enviar mail y a quién
  id int [pk, increment]
  id_mail int [ref: > MAIL.id, not null]
  id_fase int [ref: > FAS_EXP.id, not null]
  cargo cargo [not null]
}

Table hist_envio_mail_fase {
  id int [pk, increment]
  id_mail int [ref: > MAIL.id, not null]
  id_fase int [ref: > FAS_EXP.id, not null]
  id_exp int [ref: > EXP.id, not null]
  email varchar [not null]
}

Table hist_envio_mail_fase_mod { // Mail modificado
  id int [pk, increment]
  asunto varchar
  cuerpo text [not null]
  id_fase int [ref: > FAS_EXP.id, not null]
  id_exp int [ref: > EXP.id, not null]
  email varchar [not null]
}

Table rel_exp_fase as REL_EF {
  id int [pk]
  id_exp int [not null]
  id_fase int [not null]
  id_gestor int [not null]
  procesado boolean 
  timestamp datetime [not null]
  // Es esto el memo? En ese caso podría ser un 'text'
  info varchar [note: 'podría estar en otra tabla']
}

Ref: REL_EF.id_exp - EXP.id
Ref: REL_EF.id_fase - FAS_EXP.id
Ref: REL_EF.id_gestor - U.id
// Restricción avanzada: coinciden los tipos, usuario.tipo == GESTOR

//Evita tener que tener un atributo extra. Muy costoso en cuanto a JOINs aunque creemos una vista?

Table rel_exp_fav_gestor { 
  id int [pk, increment]
  id_exp int [ref: > EXP.id]
  id_gestor int [ref: > U.id]
  //Restricción avanzada: tipo_usuario == GESTOR
}

// CALENDARIO

Table evento as EV {
  id int [pk, increment]
  id_creador int [not null]
  titulo varchar [not null]
  descripcion text
  estado estado_evento_tarea [not null]
  prioridad prioridad [not null, default: 'MEDIA']
}

Ref: EV.id_creador - U.id //tipo == GESTOR

Table tarea as TASK {
  id int [pk, increment]
  descripcion text [not null]
  estado estado_evento_tarea [not null, default: 'PENDIENTE']
}

Table deadline_aviso as DLA { 
  id int [pk, increment]
  fecha datetime [not null]
  id_responsable int [not null]
  id_evento int  [not null]
  id_tarea int [not null]
}

Ref: DLA.id_responsable > U.id // tipo == GESTOR
Ref: DLA.id_evento > EV.id
Ref: DLA.id_tarea > TASK.id


// MENSAJES

// Podrían ponerse algunas restricciones como quién puede mandar mensajes a quién

Table mensaje as MSG{
  id int [pk, increment]
  timestamp datetime [not null]
  id_emisor int [not null]
  id_receptor int [not null]
  leido boolean
  etiqueta etiqueta_msg [not null] // Cuidado con la implementación
  //deadline datetime //depr???
  asunto varchar 
  cuerpo text [not null]
  eliminado boolean
}

Ref: MSG.id_emisor > U.id
Ref: MSG.id_receptor > U.id

Enum tipo_asignatura {
  TRONCAL
  OBLIGATORIA
  OPTATIVA
}

Enum cargo {
  COORDINADOR
  ADMON_IN
  ADMON_OUT
  RESP_ADMON_OUT
}

Enum nivel_idioma {
  B1
  B2
  C1
  C2
}


Enum etiqueta_msg {
  AVISO
  MENSAJE
  RECORDATORIO
}

Enum estado_evento_tarea {
  PENDIENTE
  EN_PROCESO
  TERMINADO
}

Enum prioridad {
  ALTA
  MEDIA
  BAJA
}

Enum estado_ae {
  REVISION
  DENEGADO
  ACEPTADO
  VIGENTE // Idea: cuando se haya hecho la nominación
}

Enum convocatoria {
  PRIMERA
  SEGUNDA
  EXTRAORDINARIA
}

Enum tipo_movilidad {
  ERASMUS
  ARQUS
  ERASMUS_DI
  ERASMUS_PARTNER
  INTERCAMBIO
  LIBRE_MOVILIDAD
}

Enum tipo_usuario {
  SUPERUSUARIO
  GESTOR
  ESTUDIANTE
  TUTOR
}

Enum sexo {
  F
  M
  O
}

Enum tipo_estudiante {
  INCOMING
  OUTCOMING
}

Enum cuatrimestre {
  PRIMERO
  SEGUNDO
  C_COMPLETO
}